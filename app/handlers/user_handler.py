from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types.input_media_photo import InputMediaPhoto

from app.database.requests import *
from app.keyboards.inline_kb import *
from app.keyboards.reply_rb import *
from app.FSM.fsm import Collecting_the_cake
from app.filters.filter import CheckImageFilter

import config


router = Router()

@router.message(F.text.endswith('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
@router.message(CommandStart())
async def cmd_start(message: Message):
    user = await chek_user(message.from_user.id, message.from_user.first_name)
    if not user:
        if await add_user(message.from_user.id, message.from_user.first_name):
            await message.answer('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è <b>–í–ö–£–°–ù–´–ï –¢–û–†–¢–´</b>\n\n', reply_markup=await user_menu_kb())
            await message.bot.send_message(chat_id=config.ADMIN_ID, text=f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {message.from_user.first_name}', reply_markup=await new_user(message.from_user.id, message.from_user.first_name))
        else:
            await message.answer('–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: https://t.me/korets_24')
    else:
        await message.answer('–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –º—ã —Ä–∞–¥—ã –≤–Ω–æ–≤—å –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∞—Ç—å –≤ –Ω–∞—à–µ–π –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π <b>–í–ö–£–°–ù–´–ï –¢–û–†–¢–´</b>\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é ‚¨áÔ∏è', reply_markup=await user_menu_kb())

@router.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(
        text='–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —Ñ–æ—Ä–º—É, –ø–æ—ç—Ç–æ–º—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π!'
    )

@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ'
    )
    await state.clear()

@router.message(F.text.endswith('–ú–µ–Ω—é'))
async def cmd_categories_product(message: Message):
    await message.answer('–í—ã–±–∏—Ä–µ—Ç–µ', reply_markup=await men_menu())

@router.message(F.text.endswith('–°–æ–±—Ä–∞—Ç—å —Å–≤–æ–π —Ç–æ—Ä—Ç'), StateFilter(default_state))
async def cmd_categories_product(message: Message, state: FSMContext):
    await message.answer('–ú–∞–≥–∞–∑–∏–Ω <b>"–í–ö–£–°–ù–´–ï –¢–û–†–¢–´"</b> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥—É –ø–æ —Å–æ–±–æ—Ä—É —Å–≤–æ–µ–≥–æ —Ç–æ—Ä—Ç–∞\n\n–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥—É–º–∞–Ω–Ω–æ–≥–æ —É–∫–∞–∂–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Äb–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–æ—Ä—Ç\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Collecting_the_cake.event)

@router.message(StateFilter(Collecting_the_cake.event))
async def process_event(message: Message, state: FSMContext):
    await state.update_data(event=message.text)
    await message.answer('–î–∞–ª–µ–µ –Ω–∞–º –æ—Ç –í–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä—Ç–∞, –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n\n–í–µ—Å (–≤ –∫–≥.) -\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–ª–Ω–µ–π (1, 2 ...) -\n–§–æ—Ä–º—ã –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è (–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –∫—Ä—É–≥, —Å–µ—Ä–¥—Ü–µ, <i>–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç</i>) -\n–¶–≤–µ—Ç –≥–ª–∞–∑—É—Ä–∏ -\n–ù–∞—á–∏–Ω–∫–∞ (–±–∏—Å–∫–≤–∏—Ç –∏ —Ç.–¥.) -\n–ù–∞–¥–ø–∏—Å—å –Ω–∞ —Ç–æ—Ä—Ç–µ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ª—é–±—ã–µ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Collecting_the_cake.description)

@router.message(StateFilter(Collecting_the_cake.description))
async def process_descriphion(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ üì∑ —Ñ–æ—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')
    await state.set_state(Collecting_the_cake.image)

@router.message(StateFilter(Collecting_the_cake.image), CheckImageFilter())
async def process_image(message: Message, state: FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    total = await state.get_data()
    if await collecting_cake(total, message.from_user.id):
        await message.answer_photo(total['image'], caption=f"<b><i>–°–æ–±—ã—Ç–∏–µ:</i></b> {total['event']}\n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></b> {total['description']}")
        await message.answer('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ', reply_markup=await user_menu_kb())
        await message.bot.send_photo(chat_id=config.ADMIN_ID, photo=total['image'], caption=f"<b><i>–°–æ–±—ã—Ç–∏–µ:</i></b> {total['event']}\n\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></b> {total['description']}", reply_markup=await new_user(message.from_user.id, message.from_user.first_name))
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


@router.message(F.text.endswith('–ö–∞—Ç–∞–ª–æ–≥'))
async def cmd_categories_product(message: Message):
    name_categories = await output_categories()
    if name_categories:
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=await user_categories())
    else:
        await message.answer('–ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç', reply_markup=await user_menu_kb())

@router.callback_query(F.data.startswith('user_categ '))
async def cmd_fast_food(callback: CallbackQuery):
    await callback.message.delete()
    item = await output_fast_food(int(callback.data.split()[-1]))
    if item:
        await callback.message.answer_photo(item[0][1], caption=f"üç∞ <b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b> {item[0][0]}  \n\nüîñ <b><i>–°–æ—Å—Ç–∞–≤/–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä—Ç–∞:</i></b> {item[0][2]}\n\nüíµ <b><i>–ü—Ä–∞–π—Å:</i></b> {item[0][3]} RUB", reply_markup=await add_cart(int(callback.data.split()[-1]), item[0][4]))
        await callback.answer()
    else:
        await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –∫ –Ω–∞–º —á—É—Ç—å –ø–æ–∑–∂–µ')
        await callback.answer()

@router.callback_query(F.data.startswith('forward'))
async def cmd_fast_food(callback: CallbackQuery):
    categ_id = int(callback.data.split('_')[-2])
    index = int(callback.data.split('_')[-1])
    item = await output_fast_food(categ_id)
    if item:
        if index < len(item) - 1:
            index += 1
            await callback.message.edit_media(media=InputMediaPhoto(media=item[index][1]))
            await callback.message.edit_caption(caption=f"üç∞ <b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b> {item[index][0]}  \n\nüîñ <b><i>–°–æ—Å—Ç–∞–≤/–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä—Ç–∞:</i></b> {item[index][2]}\n\nüíµ <b><i>–ü—Ä–∞–π—Å:</i></b> {item[index][3]} RUB", reply_markup=await add_cart(categ_id, item[index][4], index))
            await callback.answer()
        else:
            await callback.message.edit_media(media=InputMediaPhoto(media=item[0][1]))
            await callback.message.edit_caption(caption=f"üç∞ <b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b> {item[0][0]}  \n\nüîñ <b><i>–°–æ—Å—Ç–∞–≤/–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä—Ç–∞:</i></b>{item[0][2]}\n\nüíµ <b><i>–ü—Ä–∞–π—Å:</i></b> {item[0][3]} RUB", reply_markup=await add_cart(categ_id, item[0][4]))
            await callback.answer()
    else:
        await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –∫ –Ω–∞–º —á—É—Ç—å –ø–æ–∑–∂–µ')
        await callback.answer()

@router.callback_query(F.data.startswith('back'))
async def cmd_fast_food(callback: CallbackQuery):
    categ_id = int(callback.data.split('_')[-2])
    index = int(callback.data.split('_')[-1])
    item = await output_fast_food(categ_id)
    if item:
        if index > 0:
            index -= 1
            await callback.message.edit_media(media=InputMediaPhoto(media=item[index][1]))
            await callback.message.edit_caption(caption=f"üç∞ <b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b>{item[index][0]}  \n\nüîñ <b><i>–°–æ—Å—Ç–∞–≤/–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä—Ç–∞:</i></b> {item[index][2]}\n\nüíµ <b><i>–ü—Ä–∞–π—Å:</i></b>{item[index][3]} RUB", reply_markup=await add_cart(categ_id, item[index][4], index))
            await callback.answer()
        else:
            await callback.message.edit_media(media=InputMediaPhoto(media=item[-1][1]))
            await callback.message.edit_caption(caption=f"üç∞ <b><i>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</i></b>{item[-1][0]}  \n\n<b><i>–°–æ—Å—Ç–∞–≤/–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä—Ç–∞:</i></b> {item[-1][2]}   \n\nüíµ <b><i>–ü—Ä–∞–π—Å:</i></b>{item[-1][3]} RUB", reply_markup=await add_cart(categ_id, item[-1][4], len(item) - 1))
            await callback.answer()
    else:
        await callback.message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –∫ –Ω–∞–º —á—É—Ç—å –ø–æ–∑–∂–µ')
        await callback.answer()

#–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–º–µ–Ω—å—à–∏—Ç—å –º–µ–Ω—å—à–µ –µ–¥–µ–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∏—Å—Ö–æ–¥–Ω—É—é –∫–ª–∞–≤—É
@router.callback_query(F.data.endswith('minus'))
async def cmd_minus(callback: CallbackQuery):
    id_categ = int(callback.data.split('_')[0])
    id_product = int(callback.data.split('_')[1])
    index = int(callback.data.split('_')[2])
    if await minus_count_product(id_product):
        await callback.message.edit_reply_markup(reply_markup=await user_cart_product(id_categ, id_product, index))
    else:
        await delete_cart(callback.from_user.id, id_product)
        await callback.message.edit_reply_markup(reply_markup=await add_cart(id_categ, id_product, index))

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 10 —à—Ç.
@router.callback_query(F.data.endswith('plus'))
async def cmd_minus(callback: CallbackQuery):
    id_categ = int(callback.data.split('_')[0])
    id_product = int(callback.data.split('_')[1])
    index = int(callback.data.split('_')[2])
    if await plus_count_product(id_product):
        await callback.message.edit_reply_markup(reply_markup=await user_cart_product(id_categ, id_product, index))
    else:
        await callback.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 10 —à—Ç.')

@router.callback_query(F.data.endswith('count'))
async def cmd_minus(callback: CallbackQuery):
    check_count = await check_quantuty(int(callback.data.split()[0]))
    await callback.answer(f'–£ –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ üõí {check_count} —à—Ç.')
    await callback.answer()

@router.callback_query(F.data.startswith('count.value'))
async def count_quanty(callback: CallbackQuery):
    current_value = int(callback.data.split('_')[-2])
    categ = int(callback.data.split('_')[-1])
    await callback.answer(text=f'–¢–æ–≤–∞—Ä ‚Ññ{current_value} –∏–∑ {categ}', show_alert=True)
    await callback.answer()

#–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–º–µ–Ω—å—à–∏—Ç—å –º–µ–Ω—å—à–µ –µ–¥–µ–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∏—Å—Ö–æ–¥–Ω—É—é –∫–ª–∞–≤—É
@router.callback_query(F.data.endswith('minus'))
async def cmd_minus(callback: CallbackQuery):
    id_categ = int(callback.data.split('_')[0])
    id_product = int(callback.data.split('_')[1])
    index = int(callback.data.split('_')[2])
    if await minus_count_product(id_product):
        await callback.message.edit_reply_markup(reply_markup=await user_cart_product(id_categ, id_product, index))
    else:
        await delete_cart(callback.from_user.id, id_product)
        await callback.message.edit_reply_markup(reply_markup=await add_cart(id_categ, id_product, index))

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 10 —à—Ç.
@router.callback_query(F.data.endswith('plus'))
async def cmd_minus(callback: CallbackQuery):
    id_categ = int(callback.data.split('_')[0])
    id_product = int(callback.data.split('_')[1])
    index = int(callback.data.split('_')[2])
    if await plus_count_product(id_product):
        await callback.message.edit_reply_markup(reply_markup=await user_cart_product(id_categ, id_product, index))
    else:
        await callback.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 10 —à—Ç.')

@router.callback_query(F.data.endswith('count'))
async def cmd_minus(callback: CallbackQuery):
    check_count = await check_quantuty(int(callback.data.split()[0]))
    await callback.answer(f'–£ –≤–∞—Å –≤ –∫–æ—Ä–∑–∏–Ω–µ üõí {check_count} —à—Ç.')
    await callback.answer()


#–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∫–ª–∞–≤–∞
@router.callback_query(F.data.endswith('add_cart'))
async def cmd_add_cart(callback: CallbackQuery):
    id_categ = int(callback.data.split('_')[0])
    id_product = int(callback.data.split('_')[1])
    index = int(callback.data.split('_')[2])
    if await add_cart_product(callback.from_user.id, id_product):
        await callback.message.edit_reply_markup(reply_markup=await user_cart_product(id_categ, id_product, index))
        await callback.answer(text='–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
    else:
        await callback.answer('–¢–æ–≤–∞—Ä —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', show_alert=True)

@router.callback_query(F.data == 'bat_categ')
async def cmd_categ_back(callback: CallbackQuery):
    if await output_categories():
        await callback.message.delete()
        await callback.message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=await user_categories())
        await callback.answer()
    else:
        await callback.message.answer('–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ‚¨áÔ∏è')

@router.message(F.text.endswith('–ö–æ—Ä–∑–∏–Ω–∞'))
async def cmd_cart(message: Message):

    items = await check_user_cart(message.from_user.id)
    if items:
        lst_menu = []
        for item in items:
            parser_product_attr = await pars_product(item[0])
            lst_menu.append(parser_product_attr)

        content = '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'.join([f"|-üçΩ {lst_menu.index(item) + 1}. {item[0][0]}\n|-{item[1]} —à—Ç. —Ö {item[0][1]} = {item [1] * item[0][1]} BYN" for item in lst_menu])
        total_cost = sum([i[1] * i[0][1] for i in lst_menu])
        name_count_product = [(item[0][0], item[1]) for item in lst_menu]

        await message.answer(text=f'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{content}\n\nüí∏ –ò–¢–û–ì–û: {total_cost} RUB', reply_markup=await kb_menu_cart(name_count_product))
        
    else:
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ç–æ–ª–æ–≥ [üìã –ú–µ–Ω—é] –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä', reply_markup=await user_menu_kb())

#–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@router.message(F.text.startswith('‚ùå'))
async def cmd_delete_product(message: Message):
    name = message.text.split('.')[1]
    if await count_minus(name):
        items = await check_user_cart(message.from_user.id)
        if items:
            lst_menu = []
            for item in items:
                parser_product_attr = await pars_product(item[0])
                lst_menu.append(parser_product_attr)

            content = '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'.join([f"|-üçΩ {lst_menu.index(item) + 1}. {item[0][0]}\n|-{item[1]} —à—Ç. —Ö {item[0][1]} = {item [1] * item[0][1]} BYN" for item in lst_menu])
            total_cost = sum([i[1] * i[0][1] for i in lst_menu])
            name_count_product = [(item[0][0], item[1]) for item in lst_menu]

            await message.answer(text=f'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{content}\n\nüí∏ –ò–¢–û–ì–û: {total_cost} RUB', reply_markup=await kb_menu_cart(name_count_product))
        else:
            await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ç–æ–ª–æ–≥ [üìã –ú–µ–Ω—é] –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä')
    else:
        if await delete_menu_product(name):
            items = await check_user_cart(message.from_user.id)
            if items:
                lst_menu = []
                for item in items:
                    parser_product_attr = await pars_product(item[0])
                    lst_menu.append(parser_product_attr)

                content = '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'.join([f"|-üçΩ {lst_menu.index(item) + 1}. {item[0][0]}\n|-{item[1]} —à—Ç. —Ö {item[0][1]} = {item[1] * item[0][1]} BYN" for item in lst_menu])
                total_cost = sum([i[1] * i[0][1] for i in lst_menu])
                name_count_product = [(item[0][0], item[1]) for item in lst_menu]

                await message.answer(text=f'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{content}\n\nüí∏ –ò–¢–û–ì–û: {total_cost} RUB', reply_markup=await  kb_menu_cart(name_count_product))
            else:
                await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ç–æ–ª–æ–≥ [üìã –ú–µ–Ω—é] –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä', reply_markup=await user_menu_kb())

@router.message(F.text.endswith('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'))
async def clear_cart(message: Message):
    if await clear_cart_pr(message.from_user.id):
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞, –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—ë–¥–∏—Ç–µ –≤ üìã –ú–µ–Ω—é)', reply_markup=await user_menu_kb())
    else:
        await message.answer('–û—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É [ü§ù –ü–æ–º–æ—â—å]')

@router.message(F.text.endswith('–ü–æ–º–æ—â—å'))
async def cmd_help(message: Message):
    await message.answer('üî∏–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?\n–ú—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—Ç–∏–º!\n', reply_markup=kb_help)

@router.message()
async def cmd_echo(message: Message):
    await message.answer('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞/—Ç–µ–∫—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –≤—ã –ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é-—Ç–æ –µ—Ä—É–Ω–¥—É –∏ –±–æ—Ç –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç ü•¥')