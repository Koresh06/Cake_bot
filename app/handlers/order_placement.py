import datetime
import config
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from app.keyboards.inline_kb import generate_calendar_markup, payment_kb, ordering_solution
from app.FSM.fsm import OrderPlacement
from app.database.requests import (
    adding_order_information,
    payment_cart,
    product_name_desc_price,
    retrieve_data,
    id_order_user,
    clear_cart_pr,
    payment_confirmation
)
from app.keyboards.reply_rb import user_menu_kb

payment = Router()

@payment.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(
        text='–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —Ñ–æ—Ä–º—É, –ø–æ—ç—Ç–æ–º—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π!'
    )

@payment.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ'
    )
    await state.clear()

@payment.message(F.text.endswith('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'), StateFilter(default_state))
async def process_payment(message: Message, state: FSMContext):
    now = datetime.datetime.now()
    current_year = now.year
    current_month = now.month
    current_date = now.date()
    await message.answer('üóì –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–æ—Ä—Ç', reply_markup=await generate_calendar_markup(current_year, current_month, current_date))
    await state.set_state(OrderPlacement.data)

@payment.callback_query(F.data.startswith('calendar'))
async def process_calendar_callback(callback: CallbackQuery):
    _, year, month = callback.data.split("_")
    if 0 < int(month) < 13:
        current_date = datetime.datetime.now().date()
        markup = await generate_calendar_markup(int(year), int(month), current_date)

        await callback.bot.edit_message_reply_markup(chat_id=callback.message.chat.id,
                                        message_id=callback.message.message_id,
                                        reply_markup=markup)
    else:
        await callback.answer('–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞!')

@payment.callback_query(F.data.startswith('dayüîí'))
@payment.callback_query(F.data.startswith('day'), StateFilter(OrderPlacement.data))
async def process_day_callback(callback: CallbackQuery, state: FSMContext):
    day = callback.data.split('_')[0][-1] 
    day_day = callback.data.split('_')[-1] 
    print(day_day[-1])
    if day != 'üîí' and day_day != ' ':
        _, year, month, day = callback.data.split("_")
        selected_date = f"{day}.{month}.{year}"
        await state.update_data({'data':selected_date})
        await callback.answer(f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {selected_date}. –°–ø–∞—Å–∏–±–æ!')
        await callback.message.delete()
        await callback.message.answer('üö©–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å\n\n–§–æ—Ä–º–∞—Ç: –≥.–ú–æ—Å–∫–≤–∞, —É–ª.–ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –¥.1, –∫–≤.100')
        await state.set_state(OrderPlacement.address)
    else:
        await callback.answer('–î–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å')

@payment.message(StateFilter(OrderPlacement.address))
async def process_address(message: Message, state: FSMContext):
    await state.update_data({'address':message.text})
    result = await state.get_data()
    order = await payment_cart(message.from_user.id)
    content = [await product_name_desc_price(item[0]) for item in order]
    killo = [item[1] for item in order]
    _price = [item[0][1] for item in content]
    name_prod = [item[0][0] for item in content]
    desc_name_killo = dict(zip(name_prod, killo))
    total_cost = sum([float(i * killo[idx])  for idx, i in enumerate(_price)])
    address_d = result['address']

    if await adding_order_information(message.from_user.id, address_d, desc_name_killo, result['data'], total_cost):
        await message.answer('–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!', reply_markup=await payment_kb(message.from_user.id))
        await state.clear()
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
        await state.clear()

@payment.callback_query(F.data.startswith('order1'))
@payment.callback_query(F.data.startswith('order2'))
async def process_order1(callback: CallbackQuery):
    await callback.message.delete()
    id_order = await id_order_user(callback.from_user.id)
    index = id_order.all()[-1][0]
    content = await retrieve_data(index)
    if callback.data.split("_")[0] == 'order1':
        await callback.message.answer('–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1111 1111 1111 1026\n–ú–ú/–ì–ì: 12/22\nCVC: 000\n\n–î–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã!')
        await callback.bot.send_invoice(
            chat_id=callback.from_user.id,
            title='–û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã',
            description='; '.join([f'{k}: {v} —à—Ç.' for k, v in content[0][3].items()]),
            provider_token=config.TOKEN_YOUCASSA,
            payload=f'month_sub_{index}',
            currency='rub',
            prices=[{'label': '–†—É–±', 'amount': f"{content[0][4] * 100:.2f}"}],
            start_parameter='new_BOT',
        )
    elif callback.data.split("_")[0] == 'order2':
        await clear_cart_pr(callback.from_user.id)
        content = content[0]
        pos = '; '.join([f'{k}: {v} —à—Ç.' for k, v in content[3].items()])
        await callback.message.answer('‚úÖ –¢–æ–≤–∞—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–ø–ª–∞—á–µ–Ω!\n\n–û–∂–∏–¥–∞–π—Ç–µ... –ê–¥–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—å—Å—è', reply_markup=await user_menu_kb())
        await callback.message.bot.send_message(chat_id=config.ADMIN_ID, text=f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ {index} –æ—Ç {callback.from_user.first_name}\n\n–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {content[1]}\n\n–ü–æ–∑–∏—Ü–∏–∏: {pos}\n\nüí∏ –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {content[4]} RUB\n\n‚ôªÔ∏è –°–¢–ê–¢–£–° –û–ü–õ–ê–¢–´: {"‚úÖ" if content[5]else "‚ùå"}', reply_markup=await ordering_solution(index, callback.from_user.id))
        
    
    await callback.answer()

@payment.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout: types.PreCheckoutQuery):
    await pre_checkout.answer(ok=True)

@payment.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: Message):
    index = message.successful_payment.invoice_payload.split('_')[-1]
    await payment_confirmation(message.from_user.id, int(index))
    await clear_cart_pr(message.from_user.id)
    content = await retrieve_data(index)
    content = content[0]
    pos = '\n'.join([f'{k}: {v} —à—Ç.' for k, v in content[3].items()])
    await message.answer('‚úÖ –¢–æ–≤–∞—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–ø–ª–∞—á–µ–Ω!\n\n–û–∂–∏–¥–∞–π—Ç–µ... –ê–¥–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—å—Å—è', reply_markup=await user_menu_kb())
    await message.bot.send_message(chat_id=config.ADMIN_ID, text=f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ {index} –æ—Ç {message.from_user.first_name}\n\n–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {content[1]}\n\n–ü–æ–∑–∏—Ü–∏–∏: {pos}\n\nüí∏ –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {content[4]} RUB\n\n‚ôªÔ∏è –°–¢–ê–¢–£–° –û–ü–õ–ê–¢–´: {"‚úÖ" if content[5]else "‚ùå"}', reply_markup=await ordering_solution(index, message.from_user.id))
    
